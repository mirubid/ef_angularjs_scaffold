<#@ template  debug="true" language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="Namespace" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;

namespace <#= Namespace #>
{
<#
    var ControllerName = ModelTypeName + "Controller";
    var entitySetName = ModelMetadata.EntitySetName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
    
#>
    public class <#= ControllerName #> : ApiController
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public IQueryable<<#= ModelTypeName #>DTO> Get<#= entitySetName #>(int pageSize = 10
        <#    foreach(PropertyMetadata property in ModelMetadata.Properties.Where(p=> p.IsForeignKey)){#>
                ,<#=property.TypeName#><#=property.TypeName=="System.String"?String.Empty:"?"#> <#= property.PropertyName #> = null
        <#    } #>
        )
        {
            var model = db.<#= entitySetName #>.AsQueryable();
            <#    foreach(PropertyMetadata property in ModelMetadata.Properties.Where(p=> p.IsForeignKey)){#>
                    if(<#= property.PropertyName #> != null){
                        model = model.Where(m=> m.<#= property.PropertyName #> == <#= property.PropertyName #><#=property.TypeName=="System.String"?String.Empty:".Value"#>);
                    }
            <#    } #>
            
            return model.Select(<#= ModelTypeName #>DTO.SELECT).Take(pageSize);
        }

        [ResponseType(typeof(<#= ModelTypeName #>DTO))]
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
        {
            var model = await db.<#= entitySetName #>.Select(<#= ModelTypeName #>DTO.SELECT).FirstOrDefaultAsync(x => x.<#= primaryKeyName #> == id);
            if (model == null)
            {
                return NotFound();
            }

            return Ok(model);
        }

        public async Task<IHttpActionResult> Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #> model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != model.<#= primaryKeyName #>)
            {
                return BadRequest();
            }

            db.Entry(model).State = EntityState.Modified;

            try
            {
                await db.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!<#= ModelTypeName #>Exists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        [ResponseType(typeof(<#= ModelTypeName #>DTO))]
        public async Task<IHttpActionResult> Post<#= ModelTypeName #>(<#= ModelTypeName #> model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.<#= entitySetName #>.Add(model);
<# if(primaryKeyIsAutoGenerated) { #>
            await db.SaveChangesAsync();
<# } else { #>

            try
            {
                await db.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                if (<#= ModelTypeName #>Exists(model.<#= primaryKeyName #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }
<# } #>
            var ret = await db.<#= entitySetName #>.Select(<#= ModelTypeName #>DTO.SELECT).FirstOrDefaultAsync(x => x.<#= primaryKeyName #> == model.<#= primaryKeyName #>);
            return CreatedAtRoute("DefaultApi", new { id = model.<#= primaryKeyName #> }, model);
        }

        [ResponseType(typeof(<#= ModelTypeName #>DTO))]
        public async Task<IHttpActionResult> Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
        {
            <#= ModelTypeName #> model = await db.<#= entitySetName #>.FindAsync(id);
            if (model == null)
            {
                return NotFound();
            }

            db.<#= entitySetName #>.Remove(model);
            await db.SaveChangesAsync();
            var ret = await db.<#= entitySetName #>.Select(<#= ModelTypeName #>DTO.SELECT).FirstOrDefaultAsync(x => x.<#= primaryKeyName #> == model.<#= primaryKeyName #>);
            return Ok(ret);
        }


        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool <#= ModelTypeName #>Exists(<#= primaryKeyShortTypeName #> id)
        {
            return db.<#= entitySetName #>.Count(e => e.<#= primaryKeyName #> == id) > 0;
        }
    }
}